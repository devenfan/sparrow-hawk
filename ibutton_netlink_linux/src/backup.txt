
###############################################################
#################### w1_netlink_userapp.c #####################
###############################################################


static void print_all_masters(void)
{
    char buf[MASTER_MAX_COUNT * 20];
    char * position;
    int index = 0;

    memset(buf, 0, MASTER_MAX_COUNT * 20);
    for(index = 0, position = buf; index < m_masterCount; index++)
    {
        sprintf(position, "\tMaster[%d]: %d\n", index, m_masterIDs[index]);
        position += strlen(position);
    }
    printf("Total %d Masters: \n%s\n", m_masterCount, buf);
}




/*
static void on_master_listed(int * master_ids, int master_count)
{
    int index = 0;

    Debug("on_master_listed");

    memset( m_masterIDs, 0, sizeof(int) * MASTER_MAX_COUNT);
    m_masterCount = master_count;
    m_masterCurrentIndex = (master_count > 0) ? 0 : -1;

    for(index = 0; index < master_count; index++)
    {
        m_masterIDs[index] = *(master_ids + index);
    }

    print_all_masters();
}
*/


static void on_salve_found(w1_slave_rn * slave_ids, int slave_count)
{
    int index = 0;

    Debug("on_salve_found");

    memset( m_slaveIDs, 0, sizeof(w1_slave_rn) * SLAVE_MAX_COUNT);
    m_slaveCount = slave_count;
    m_slaveCurrentIndex = (slave_count > 0) ? 0 : -1;

    for(index = 0; index < slave_count; index++)
    {
        m_slaveIDs[index] = *(slave_ids + index);
    }

    print_all_slaves();
}

int main(void)
{
	int sleepSecond = 3;

	char choice;
    int msgType;
    int cmdType;
    char useless[50];

    w1_slave_rn slaves[SLAVE_MAX_COUNT];
    memset(slaves, 0, sizeof(w1_slave_rn) * SLAVE_MAX_COUNT);
    int slaveCount = 0;

    BOOL succeed = FALSE;

    int cmdSize = sizeof(struct w1_netlink_cmd) + 1024;    //the more the better
    struct w1_netlink_cmd * cmd = (struct w1_netlink_cmd *) malloc(cmdSize);

    Debug("1");

    initialize();

    Debug("2");

	if(!w1_netlink_userservice_start(&m_userCallbacks))
	{
	    printf("Cannot start w1 netlink userspace service...\n");
	    goto GameOver;
	}



    /*
	printf("Continue(C) or Quit(Q): \n");
    scanf("%c", &choice);

    if('Q' == choice) goto GameOver;

    printf("Please input w1 msg type: \n");
    scanf("%d", &msgType);
    memset(useless, 0, 50);
    describe_w1_msg_type(msgType, useless);
    printf("Your input w1 msg type: %s\n", useless);

    printf("Please input w1 cmd type: \n");
    scanf("%d", &cmdType);
    memset(useless, 0, 50);
    describe_w1_cmd_type(cmdType, useless);
    printf("Your input w1 cmd type: %s\n", useless);

    */

	/*
	send_w1_forkmsg();
    */

/*

    request_to_list_w1_masters();

    request_to_list_w1_masters();

    request_to_list_w1_masters();

*/
    sleep(sleepSecond);
    printf("Main thread wake up after %d seconds...\n", sleepSecond);

/*
    //if(m_masterCount > 0)
    {
        memset(cmd, 0, cmdSize);
        cmd->cmd == W1_CMD_SEARCH;
        cmd->len = cmdSize - sizeof(struct w1_netlink_cmd);

        if(process_w1_master_cmd(m_masterIDs[m_masterCurrentIndex],  cmd))
        {
            Debug("process_w1_master_cmd OK!");
        }
        else
        {
            Debug("process_w1_master_cmd Failed!");
        }
    }

    free(cmd);
*/

    succeed = w1_master_search(m_masterIDs[m_masterCurrentIndex], FALSE, slaves, &slaveCount);

    if(succeed)
    {
        Debug("w1_master_search Succeed!");
    }
    else
    {
        Debug("w1_master_search Failed!");
    }

    printf("Type something to quit: \n");
    scanf("%s", useless);
    printf("OK: %s\n", useless);

    w1_netlink_userservice_stop();


GameOver:

	printf("Main thread Game Over...\n");
	return 0;
}

###############################################################
######################### w1_ndklog.c #########################
###############################################################

#ifndef SH_NDKLOG_H_INCLUDED
#define SH_NDKLOG_H_INCLUDED


#include <android/log.h>    //android log support

/*
#define MAX_LOG_SIZE  1024

static char g_logBuf[MAX_LOG_SIZE];

#define logging(logLevel, format, args...)              \
{                                                       \
    memset(g_logBuf, 0, MAX_LOG_SIZE * sizeof(char));   \
    sprintf(g_logBuf, format, ##args);                  \
    __android_log_write(logLevel, LOG_TAG, g_logBuf);   \
}
*/



#define Debug(LOG_TAG, format, args...)                                 \
{                                                                       \
    __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, format, ##args);    \
    printf("[%s]: \t", LOG_TAG);                                        \
    printf(format, ##args);                                             \
}


#endif // SH_NDKLOG_H_INCLUDED


###############################################################
################## w1_netlink_userservice.c ###################
###############################################################

/*
BOOL process_w1_master_cmd(w1_master_id masterId, BYTE w1CmdType,
                           void * dataIn, int dataInLen, void ** pDataOut, int * pDataOutLen)
{
    if(0 == masterId) return FALSE;   //no master id
    if(NULL == dataIn) return FALSE;
    if(NULL == pDataOut) return FALSE;
    if(NULL == pDataOutLen) return FALSE;

    if(W1_CMD_SEARCH != w1CmdType &&
       W1_CMD_ALARM_SEARCH != w1CmdType &&
       W1_CMD_RESET != w1CmdType)
       return FALSE;

    BOOL succeed = FALSE;

    //struct w1_netlink_msg ** ppRecvMsg = malloc(sizeof(struct w1_netlink_msg *));

    struct w1_netlink_msg * w1msgRecv = NULL;
    struct w1_netlink_msg * w1cmdRecv = NULL;

    succeed = transact_w1_msg(W1_MASTER_CMD, w1CmdType, &w1_master_id, sizeof(w1_master_id),
                              dataIn, dataInLen, &w1msgRecv);

    if(succeed)
    {
        w1cmdRecv = (struct w1_netlink_cmd *) (w1msgRecv + 1);

        *pDataOut = w1cmdRecv->data;
        *pDataOutLen = w1cmdRecv->len;

        succeed = (0 == w1msgRecv->status) ? TRUE : FALSE;
    }

    return succeed;
}
*/


/*
BOOL w1_process_slave_cmd(w1_slave_rn * slaveId, BYTE w1CmdType,
                          void * dataIn, int dataInLen, void ** pDataOut, int * pDataOutLen)
{
    if(NULL == slaveId) return FALSE;
    if(NULL == dataIn) return FALSE;
    if(NULL == pDataOut) return FALSE;
    if(NULL == pDataOutLen) return FALSE;

    if(W1_CMD_READ != w1CmdType &&
       W1_CMD_WRITE != w1CmdType &&
       W1_CMD_TOUCH != w1CmdType) return FALSE;

    BOOL succeed = FALSE;

    //struct w1_netlink_msg ** ppRecvMsg = malloc(sizeof(struct w1_netlink_msg *));

    struct w1_netlink_msg * w1msgRecv = NULL;
    struct w1_netlink_msg * w1cmdRecv = NULL; //issue here!!!! Wrong declaration!!!!

    succeed = transact_w1_msg(W1_SLAVE_CMD, w1CmdType, slaveId, sizeof(w1_slave_rn),
                              dataIn, dataInLen, &w1msgRecv);

    succeed = (0 == w1msgRecv->status) ? TRUE : FALSE;

    if(succeed)
    {
        w1cmdRecv = (struct w1_netlink_cmd *) (w1msgRecv + 1);

        *pDataOut = w1cmdRecv->data;
        *pDataOutLen = w1cmdRecv->len;
    }

    return succeed;
}
*/


/*
BOOL request_to_search_w1_slaves(BOOL alarmSearch)
{
    BOOL ret = FALSE;
    struct cn_msg * cnmsg = NULL;
    struct w1_netlink_msg * w1msg = NULL;
	struct w1_netlink_cmd * w1cmd = NULL;

    if(g_isWaitingAckMsg) return FALSE;    //busy

	cnmsg = malloc_w1_netlinkmsg();
	w1msg = (struct w1_netlink_msg *) (cnmsg + 1);
	w1cmd = (struct w1_netlink_cmd *) (w1msg + 1);

	w1cmd->len = 0;
	w1cmd->cmd = alarmSearch ? W1_CMD_ALARM_SEARCH : W1_CMD_SEARCH;

	w1msg->len = sizeof(struct w1_netlink_cmd) + w1cmd->len;
	w1msg->len = 0;
	w1msg->type = W1_MASTER_CMD;
	//TODO: w1-msg->id = master_id...

	cnmsg->len = sizeof(struct w1_netlink_msg) + w1msg->len;

	ret = send_w1_netlinkmsg(cnmsg);

	free_w1_netlinkmsg(cnmsg);

	return ret;
}
*/



struct cn_msg * malloc_w1_netlinkmsg(void)
{
	void * buffer = NULL;
	struct cn_msg * cnmsg = NULL;
	//struct w1_netlink_msg * w1msg = NULL;

	buffer = malloc(MAX_CNMSG_SIZE);

	if(NULL == buffer) return NULL;

	cnmsg = (struct cn_msg *) buffer;

    //struct cb_id w1_id = {.idx = CN_W1_IDX, .val = CN_W1_VAL};

	memset(cnmsg, 0, MAX_CNMSG_SIZE);

    cnmsg->id.idx = CN_W1_IDX;
    cnmsg->id.val = CN_W1_VAL;
    cnmsg->seq = generate_w1_global_sequence();

	//we cannot take "__u8	data[0]" as "void *", because former one don't take any mem.
	//Debug("sizeof(struct w1_netlink_msg): %d bytes\n", sizeof(struct w1_netlink_msg));

	return cnmsg;
}


void free_w1_netlinkmsg(struct cn_msg * cnmsg)
{
	/*
	struct w1_netlink_msg * w1msg = (struct w1_netlink_msg *)(cnmsg->data);
	struct w1_netlink_cmd * w1cmd = (struct w1_netlink_cmd *)(w1msg->data);

	free(w1cmd->data);
	free(w1cmd);
	free(w1msg);
	*/

	free(cnmsg);
}

static BOOL request_to_list_w1_masters(void)
{
    BOOL ret = FALSE;
    struct cn_msg * cnmsg = NULL;
    struct w1_netlink_msg * w1msg = NULL;

	cnmsg = malloc_w1_netlinkmsg();
	w1msg = (struct w1_netlink_msg *) (cnmsg + 1);

    w1msg->len = 0;
	w1msg->type = W1_LIST_MASTERS;

	cnmsg->len = sizeof(struct w1_netlink_msg) + w1msg->len;

	ret = send_w1_netlinkmsg(cnmsg);

	free_w1_netlinkmsg(cnmsg);

	return ret;
}





